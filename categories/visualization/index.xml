<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualization on Eduard Heller</title>
    <link>https://eduardheller.github.io/categories/visualization/</link>
    <description>Recent content in Visualization on Eduard Heller</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eduardheller.github.io/categories/visualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terminal: The Network</title>
      <link>https://eduardheller.github.io/projects/terminal/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/terminal/</guid>
      <description>Technologies: Unity3d Languages: C#  The Terminal: Network has been a hobby project of mine, which is a hacking simulation in a rather dark environment. In this game the player is guided mainly by the console. The player has to fight through different servers to reach the goal and hack servers by solving puzzles in a 3D environment. A robot, controlled by the player, has to solve the puzzles in a programming language similar to BASIC.</description>
    </item>
    
    <item>
      <title>Battle of the Throne</title>
      <link>https://eduardheller.github.io/projects/battle-of-the-throne/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/battle-of-the-throne/</guid>
      <description> Technologies: OpenGL, GLSL Languages: C#  Battle of the Thrones is a 3D-Towerdefense game made in C# and OpenGL. This game has one level with multiple waves, enemies and ends with a boss. It was a solo project in which I created my own engine and GLSL shaders. It supports:
 shadow mapping/cascade shadow mapping view frustum culling water refraction/reflection stack based GUI instance based particles distance field text rendering  </description>
    </item>
    
    <item>
      <title>Replay-System in a Multi-User VR-Environment</title>
      <link>https://eduardheller.github.io/projects/replaysystem/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/replaysystem/</guid>
      <description>Technologies: Unity3d Languages: C#  In my master&amp;rsquo;s thesis I had to develop a replay system in Unity3d for the already developed framework from my time as a research assistant. Above all, the system should work in a multiplayer environment. The challenge was to develop a deterministic replay system that can contain multiple timelines. The timelines each contain a gameplay of a gaming session. These can be saved, loaded and played back.</description>
    </item>
    
    <item>
      <title>Multi-User Virtual Reality Prototype</title>
      <link>https://eduardheller.github.io/projects/epicsave/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/epicsave/</guid>
      <description>Technologies: Unity3d, Virtual Reality Languages: C#  During my work as a research assistant, we developed a virtual reality framework in Unity3d as a team of six and built a prototype from it.In the scenario, you play a paramedic and have the task of rescuing a child suffering from anaphylactic shock. My responsibilities were the architecture, design and implementation of the virtual reality interactions and network programming of the framework.</description>
    </item>
    
    <item>
      <title>GRACE Visualization</title>
      <link>https://eduardheller.github.io/projects/gracevisualization/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/gracevisualization/</guid>
      <description>Technologies: OpenGL, Swing Languages: Java  The GRACE visualization software is about the visualization of satellite data that depicts the gravity of the earth. The data was mapped using color, where red means a lot of gravity and blue means little. In addition, depending on gravity, the vertices adapt. Almost 10 years of data were used for visualization, which can be animated via a time-lapse.</description>
    </item>
    
    <item>
      <title>Lindenmayer-Systems</title>
      <link>https://eduardheller.github.io/projects/lindenmayer-systems/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/lindenmayer-systems/</guid>
      <description>Technologies: OpenGL, GLSL, QT Languages: C++  During my bachelor thesis I developed software for the generation and visualization of certain plants with stochastic Lindenmayer systems. As a result, you can create and export randomized plants there using certain strings (known as turtles). The generation itself is fully parameterizable (like thickness and vertex count) and the textures can be set for the leaves. For development I used C++, QT and OpenGL.</description>
    </item>
    
  </channel>
</rss>
