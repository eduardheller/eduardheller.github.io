<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eduard Heller</title>
    <link>https://eduardheller.github.io/</link>
    <description>Recent content on Eduard Heller</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eduardheller.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terminal: The Network</title>
      <link>https://eduardheller.github.io/projects/terminal/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/terminal/</guid>
      <description>Technologies: Unity3d Languages: C#  The Terminal: Network has been a hobby project of mine, which is a hacking simulation in a rather dark environment. In this game the player is guided mainly by the console. The player has to fight through different servers to reach the goal and hack servers by solving puzzles in a 3D environment. A robot, controlled by the player, has to solve the puzzles in a programming language similar to BASIC.</description>
    </item>
    
    <item>
      <title>Battle of the Throne</title>
      <link>https://eduardheller.github.io/projects/battle-of-the-throne/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/battle-of-the-throne/</guid>
      <description> Technologies: OpenGL, GLSL Languages: C#  Battle of the Thrones is a 3D-Towerdefense game made in C# and OpenGL. This game has one level with multiple waves, enemies and ends with a boss. It was a solo project in which I created my own engine and GLSL shaders. It supports:
 shadow mapping/cascade shadow mapping view frustum culling water refraction/reflection stack based GUI instance based particles distance field text rendering  </description>
    </item>
    
    <item>
      <title>Replay-System in a Multi-User VR-Environment</title>
      <link>https://eduardheller.github.io/projects/replaysystem/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/replaysystem/</guid>
      <description>Technologies: Unity3d Languages: C#  In my master&amp;rsquo;s thesis I had to develop a replay system in Unity3d for the already developed framework from my time as a research assistant. Above all, the system should work in a multiplayer environment. The challenge was to develop a deterministic replay system that can contain multiple timelines. The timelines each contain a gameplay of a gaming session. These can be saved, loaded and played back.</description>
    </item>
    
    <item>
      <title>Multi-User Virtual Reality Prototype</title>
      <link>https://eduardheller.github.io/projects/epicsave/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/epicsave/</guid>
      <description>Technologies: Unity3d, Virtual Reality Languages: C#  During my work as a research assistant, we developed a virtual reality framework in Unity3d as a team of six and built a prototype from it.In the scenario, you play a paramedic and have the task of rescuing a child suffering from anaphylactic shock. My responsibilities were the architecture, design and implementation of the virtual reality interactions and network programming of the framework.</description>
    </item>
    
    <item>
      <title>GRACE Visualization</title>
      <link>https://eduardheller.github.io/projects/gracevisualization/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/gracevisualization/</guid>
      <description>Technologies: OpenGL, Swing Languages: Java  The GRACE visualization software is about the visualization of satellite data that depicts the gravity of the earth. The data was mapped using color, where red means a lot of gravity and blue means little. In addition, depending on gravity, the vertices adapt. Almost 10 years of data were used for visualization, which can be animated via a time-lapse.</description>
    </item>
    
    <item>
      <title>Lindenmayer-Systems</title>
      <link>https://eduardheller.github.io/projects/lindenmayer-systems/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/projects/lindenmayer-systems/</guid>
      <description>Technologies: OpenGL, GLSL, QT Languages: C++  During my bachelor thesis I developed software for the generation and visualization of certain plants with stochastic Lindenmayer systems. As a result, you can create and export randomized plants there using certain strings (known as turtles). The generation itself is fully parameterizable (like thickness and vertex count) and the textures can be set for the leaves. For development I used C++, QT and OpenGL.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://eduardheller.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/about/</guid>
      <description>Hello, I&#39;m Eduard Heller and I&#39;m currently working as a software developer in Hannover, Germany. I started programming when I was 12 years old and became passionate about game development. The very first programming language I used was Dark Basic. A few months later I switched to Delphi and started my first finished game, a topdown 2D RPG. On this project I learned a lot about game design. I switched to C++ and learned a lot of principles about how a computer works.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://eduardheller.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/contact/</guid>
      <description>NameEmailMessageSendEduard Hellereduard.heller.89@gmail.com+49 1590 1368555GithubXingLinkedIn</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://eduardheller.github.io/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/resume/</guid>
      <description>CV DownloadYou can download my CV in Englisch or in German. Education 2016-2020 M.Sc, Applied Computer Science; Hochschule Hannover Thesis title: Replay-Systems in a Multi-User Virtual Reality-Environment 2013-2016 B.Sc, Applied Computer Science; Hochschule Hannover Thesis title: Stochastic Lindenmayer systems for representation of plants 2010-2013 B.Sc, Mathematics (canceled); Leibniz Universit√§t Hannover   Work 2020-present Full-Stack Developer; VHV Gruppe Development of backend applications, microservices and frontend webapps Technologies: Spring Boot, Angular, React, Grafana, InspectIT, Kibana 2018-2019 Research associate in the field of serious games and virtual reality; Hochschule Hannover Publication: EPICSAVE Lifesaving Decisions - a Collaborative VR Training Game Sketch for Paramedics 2017-2018 Student assistant in the field of serious games and virtual reality; Hochschule Hannover 2017 Tutor for computer graphics; Hochschule Hannover *-Today: Several completed private projects over the years  </description>
    </item>
    
    <item>
      <title>Skills</title>
      <link>https://eduardheller.github.io/skills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eduardheller.github.io/skills/</guid>
      <description>Programming LanguagesC#, JavaC++, Javascript, Typescript, SQL, HTML, CSSGLSL, PythonC, x86 AssemblySoftware/ToolsVersion Control: Git, Bitbucket, Gitlab
IDE: IntelliJ, Riders, Visual Studio, Eclipse
Documentation: Confluence, Jira
Deployment: CI/Jenkins
Testing: ReadyApi
Design: Adobe Photoshop
3D Modelling: Autodesk 3dsMax, Blender
Software Architecture StylesArchitecture Principles: SOLID, MV-Patterns, State-Machine
Patterns: Inversion of Control, Strategy, Observer, &amp;hellip;
Testing: Unit Testing with JUnit, Spock (groovy) and NUnit</description>
    </item>
    
  </channel>
</rss>
